<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

    using System;
    using System.Linq.Expressions;
    using System.Reactive.Disposables;
    using System.Reactive.Linq;
    using System.Reactive.Subjects;
    using ReactiveUI;

namespace Vistian.Reactive.Validation
{
	<# int maxFuncLength = 6; #>
    <# for(int length=2; length <= maxFuncLength; length++) { #>
    <# var templParams = Enumerable.Range(1, length).Select(x => "TProperty" + x.ToString()); #>
    <# string valuePropertyParams = String.Join(", ", Enumerable.Range(1, length).Select(x => String.Format("property{0}", x))); #>
	<# string actionParams = String.Join(", ", Enumerable.Range(1, length).Select(x => String.Format("prop{0}", x))); #>

    public sealed class BasePropertyValidation<TViewModel,<#= String.Join(",",templParams) #>> : BasePropertyValidation<TViewModel>,IDisposable
    {
        /// <summary>
        /// The last calculated value of the properties.
        /// </summary>
        private Tuple<<#= String.Join(",",templParams) #>> _lastValue;

        /// <summary>
        /// Represents the current value.
        /// </summary>
        private readonly Subject<Tuple<<#= String.Join(",",templParams) #>>> _valueSubject = new Subject<Tuple<<#= String.Join(",",templParams) #>>>();

        /// <summary>
        /// The validation message factory
        /// </summary>
        private readonly Func<Tuple<<#= String.Join(",",templParams) #>>,bool,ValidationText> _message;

        /// <summary>
        /// The connected observable to see updates in properties being validated
        /// </summary>
        private readonly IConnectableObservable<Tuple<<#= String.Join(",",templParams) #>>> _valueConnectedObservable;

        private readonly CompositeDisposable _disposables = new CompositeDisposable();

        /// <summary>
        /// Are we connected
        /// </summary>
        private bool _connected;

        /// <summary>
        /// Function to determine if valid or not.
        /// </summary>
        private readonly Func<Tuple<<#= String.Join(",",templParams) #>>, bool> _isValidFunc;


        public BasePropertyValidation(TViewModel viewModel,

			<# for(int property=1;property <= length;++property) { #>
		Expression<Func<TViewModel,TProperty<#=property#>>> property<#=property #>,
	<# } #>

            Func<Tuple<<#=String.Join(",",templParams)#>>, bool> isValidFunc,
			Func<Tuple<<#=String.Join(",",templParams)#>>,string> message):

            this(viewModel,<#=String.Join(",",valuePropertyParams)#>,isValidFunc,
                (Tuple<<#=String.Join(",",templParams)#>> p, bool v) => new ValidationText(v ? string.Empty : message(p)))
        {
        }

        public BasePropertyValidation(TViewModel viewModel,

	<# for(int property=1;property <= length;++property) { #>
		Expression<Func<TViewModel,TProperty<#=property#>>> property<#=property #>,
	<# } #>

            Func<Tuple<<#=String.Join(",",templParams) #>>, bool> isValidFunc,

            Func<Tuple<<#=String.Join(",",templParams)#>>, bool, string> messageFunc):
			this(viewModel,<#=String.Join(",",valuePropertyParams)#>,isValidFunc,(parameters,isValid) => new ValidationText(messageFunc(parameters,isValid)))
        {            
        }


        public BasePropertyValidation(TViewModel viewModel,
	<# for(int property=1;property <= length;++property) { #>
		Expression<Func<TViewModel,TProperty<#=property#>>> property<#=property #>,
	<# } #>
		Func<Tuple<<#= String.Join(",",templParams) #>>,bool> validSelector,
		Func<Tuple<<#= String.Join(",",templParams) #>>,bool,ValidationText> message)
        {
            _message = message;
            _isValidFunc = validSelector;

            // add the properties used to our list
			<# for(int property=1;property<=length;property++) { #>
AddProperty(property<#=property#>);
			<# } #>

            // always record the last value seen
            _disposables.Add(_valueSubject.Subscribe(v => _lastValue = v));

            // setup a connected observable to see when values change and cast that to our value subject
            _valueConnectedObservable = viewModel.WhenAnyValue(<#=valuePropertyParams#>).DistinctUntilChanged().Multicast(_valueSubject);
        }

        protected override IObservable<ValidationState> GetValidationChangeObservable()
        {
            Activate();

            return _valueSubject.
                    Select(value =>
                    {
                        var isValid = _isValidFunc(value);
                        return new ValidationState(isValid, this.GetMessage(value, isValid), this);
                    }).DistinctUntilChanged(new ValidationStateComparer());
        }


        private ValidationText GetMessage(Tuple<<#=String.Join(",",templParams)#>> @params,bool isValid)
        {
            return _message(@params,isValid);
        }

        /// <summary>
        /// Activate the connection to ensure we start seeing validations.
        /// </summary>
        private void Activate()
        {
            if (!_connected)
            {
                _disposables.Add(_valueConnectedObservable.Connect());

                _connected = true;
            }
        }

        public override void Dispose()
        {
            _disposables.Dispose();
            base.Dispose();
        }
    }
<# } #>
}